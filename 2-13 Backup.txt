import tkinter as tk
from tkinter import Frame, Label, Button, PanedWindow, Listbox, Toplevel, Scrollbar, OptionMenu, Checkbutton
from tkinter import HORIZONTAL, VERTICAL, TOP, BOTTOM, LEFT, RIGHT, CENTER
from tkinter import END, FIRST, LAST
from tkinter import Y, X, BOTH
from tkinter import SINGLE, MULTIPLE, EXTENDED, BROWSE, UNDERLINE, DOTBOX  # listbox
from tkinter import FLAT, GROOVE, RAISED, RIDGE, SOLID, SUNKEN  # reliefs
from tkinter import Variable, BooleanVar, StringVar, IntVar
from tkinter import filedialog, ttk, font
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from configparser import ConfigParser
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
import DV_Table
import DV_Toolbar
import DV_Listbox
import DV_EDA_Control_Panels
import DV_DC_Control_Panels
import time

# create main window
root = tk.Tk()
root.title('DataVis')
root.geometry('{}x{}'.format(2400, 1200))                   # REMOVE THIS ANNN....

# print(font.names()) #all available fonts
myfont = font.nametofont('TkDefaultFont')
myfont.configure(size=24)                                   # ......NNND THIS, to get normal resolution on non mac monitors
# Pre-brake fonts and window size so it doesn't happen later
data = sns.load_dataset('Iris')
sns.pairplot(data=data)

# create notebook (thing that controls the tabs)
note = ttk.Notebook(root)

# create config parser for ini files
config = ConfigParser()



"""
def Settings_Reset_Warning():
    "Creates modal dialog to ensure user wants to change dataset even if it resets ini settings"
    dlg = Toplevel(master=root)
    dlg.transient(root)
    dlg.grab_set()
    ask = BooleanVar()
    cont = BooleanVar()

    def Yes():
        cont.set(True)
        dlg.destroy()

    def No():
        cont.set(False)
        dlg.destroy()

    Label(dlg, text="Switching datasets will reset any graph settings\n that are sensitive to data changes. Continue?").grid(
        row=0, columnspan=2)
    Button(dlg, text="Continue", command=Yes).grid(
        row=1, column=0, sticky='ne')
    Button(dlg, text="Cancel", command=No).grid(row=1, column=1, sticky='nw')
    Checkbutton(dlg, variable=ask, text="Don't ask again", padx=2,
                pady=2).grid(row=2, columnspan=2, sticky='s')
    dlg.wait_window(dlg)
    if(ask.get()):
        config.read('datavis.ini')
        config.set('general', 'settings_reset_warning', 'False')
        with open('datavis.ini', 'w') as configfile:
            config.write(configfile)
        configfile.close()
    print('Cont.get: '+str(cont.get()))
    return cont.get()


def Select_Dataset():
    "Prompt user to select a dataset file"
    filename = filedialog.askopenfilename(initialdir="/", title="Select Dataset", filetypes=(
        ("csv files", "*.csv"), ("xls files", "*.xls"), ("all files", "*.*")))
    config.read('datavis.ini')
    curr = config.get('general', 'dataset_location')
    print('tests')
    if filename and (curr != filename):  # new dataset?
        if config.getboolean('general', 'settings_reset_warning'):  # ask again?
            print('ask?')
            if Settings_Reset_Warning():  # continue?
                print('updating')
                Update_Data_Loc(filename)  # change dataset
        else:
            Update_Data_Loc(filename)


def Update_Data_Loc(string):
    "Saves updated data location to ini"
    config.read('datavis.ini')
    config.set('general', 'dataset_location', string)
    with open('datavis.ini', 'w') as configfile:
        config.write(configfile)
    configfile.close()


def Reset_ini(degree):  # FINISH ME
    "Reset ini to various degrees. 0 is all settings. 1 is only settings affected by dataset changes."
    if degree == 0:  # full reset
        pass
    else:  # partial reset
        if config.has_section('pairplot'):
            pass
"""

def EDA_onSelect(evt):
    w = evt.widget
    if(w.curselection()):
        # get data about current selection
        index = int(w.curselection()[0])
        value = w.get(index)
        # Check ini for graph settings
        config.read('datavis.ini')
        # display 'please stand by' image
        fig.clear()
        a = fig.add_subplot(111)
        img_arr = mpimg.imread('PSB.png')
        a.imshow(img_arr)
        a.axis('off')
        EDA_Canvas.draw()
        if (index == 0):  # pairplot
            raise_frame(pp_frame)
            # use custom vals for fig creation
            if(config.has_section('pairplot') and config.has_section('general')):
                # import user data set
                data_loc = config.get('general', 'dataset_location')
                data = pd.read_csv(data_loc, encoding='latin-1')
                data = data.dropna()

                # import user graph settings
                # which column determines color of points
                pp_hue = config.get('pairplot', 'hue')
                if pp_hue == 'None':
                    pp_hue = None
                
                # which columns to use in plot
                pp_vars = config.get('pairplot', 'vars').split(',')
                if pp_vars == ['None'] or pp_vars == ['']:
                    pp_vars = None

                # fit regression line?
                pp_kind = config.get('pairplot', 'kind')

                # which graphs to use along diagonal
                pp_diag_kind = config.get('pairplot', 'diag_kind')

                # create and display custom graph
                print('PP ON LISTBOX:')
                print('Hue: ', pp_hue)
                print('Vars: ', pp_vars)
                print('Kind: ', pp_kind)
                print('Diag_Kind: ', pp_diag_kind)
                pp = sns.pairplot(data=data, hue=pp_hue, vars=pp_vars,
                                  kind=pp_kind, diag_kind=pp_diag_kind)
                pp.savefig('pp.png')
                fig.clear()
                a = fig.add_subplot(111)
                img_arr = mpimg.imread('pp.png')
                a.imshow(img_arr)
                a.axis('off')
                EDA_Canvas.draw()
            else:  # go with default fig creation
                data = sns.load_dataset('Iris')
                data = data.dropna()
                pp = sns.pairplot(data=data, kind='reg', hue='species')
                pp.savefig('pp.png')
                fig.clear()
                a = fig.add_subplot(111)
                img_arr = mpimg.imread('pp.png')
                a.imshow(img_arr)
                a.axis('off')
                EDA_Canvas.draw()
        elif (index == 1):  # correlation matrix
            raise_frame(cm_frame)
            # use custom vals for fig creation
            if(config.has_section('correlation') and config.has_section('general')):
                # import user data set
                data_loc = config.get('general', 'dataset_location')
                data = pd.read_csv(data_loc, encoding='latin-1')
                data = data.dropna()
                data = data.corr()

                # import user graph settings
                cm_annot = config.getboolean(
                    'correlation', 'annot')  # print numbers in cells?
                cm_cbar = config.getboolean(
                    'correlation', 'cbar')  # show colobar?
                cm_square = config.getboolean(
                    'correlation', 'square')  # make cells square?
                
                # create and display custom graph
                print('CM ON LISTBOX:')
                print('Annot: ', cm_annot)
                print('Cbar: ', cm_cbar)
                print('Square: ', cm_square)
                fig.clear()
                a = fig.add_subplot(111)
                sns.heatmap(data=data, annot=cm_annot,
                            cbar=cm_cbar, square=cm_square, ax=a)
                EDA_Canvas.draw()
            else:  # go with default fig creation
                data = sns.load_dataset('titanic')
                data = data.dropna()
                data = data.corr()
                fig.clear()
                a = fig.add_subplot(111)
                sns.heatmap(data=data, ax=a)
                EDA_Canvas.draw()
        elif (index == 2):  # bar chart
            raise_frame(bp_frame)
            # use custom vals for fig creation
            if(config.has_section('bar') and config.has_section('general')):
                # import user data set
                data_loc = config.get('general', 'dataset_location')
                data = pd.read_csv(data_loc, encoding='latin-1')
                data = data.dropna()
                
                # import user graph settings
                bp_x = config.get('bar', 'x')  # x var
                bp_y = config.get('bar', 'y')  # y var
                bp_hue = config.get('bar', 'hue')  # hue column
                bp_ci = config.get('bar', 'ci')  # confidence intervals

                # create and display custom graph
                print('BP ON LISTBOX:')
                print('X: ', bp_x)
                print('Y: ', bp_y)
                print('Hue: ', bp_hue)
                print('Ci: ', bp_ci)
                fig.clear()
                a = fig.add_subplot(111)
                sns.barplot(data=data, x=bp_x, y=bp_y, hue=bp_hue,
                            ci=bp_ci, ax=a)
                EDA_Canvas.draw()
            else:  # go with default fig creation
                data = sns.load_dataset("flights")
                data = data.dropna()
                fig.clear()
                a = fig.add_subplot(111)
                sns.barplot(data=data, x='month',
                            y='passengers', ci=None, ax=a)
                EDA_Canvas.draw()
        elif (index == 3):  # scatter plot
            # use custom vals for fig creation
            if(config.has_section('scatter') and config.has_section('general')):
                # import user data set
                data = config.get('general', 'dataset_location')
                data = data.dropna()
                
                # import user graph settings
                sp_x = config.get('scatter', 'x')  # x var
                sp_y = config.get('scatter', 'y')  # y var
                sp_hue = config.get('scatter', 'hue')  # hue column
                sp_legend = config.getboolean(
                    'scatter', 'legend')  # display legend?
                sp_scatter = config.getboolean(
                    'scatter', 'scatter')  # draw scatter?
                # fit linear regression line?
                sp_fit_reg = config.get('scatter', 'fit_reg')
                
                # create and display custom graph
                print('SP ON LISTBOX:')
                print('X: ', sp_x)
                print('Y: ', sp_y)
                print('Hue: ', sp_hue)
                print('Legend: ', sp_legend)
                print('Scatter: ', sp_scatter)
                print('Fit Reg: ', sp_fit_reg)
                sp = sns.lmplot(data=data, x=sp_x, y=sp_y, hue=sp_hue,
                                legend=sp_legend, scatter=sp_scatter, fit_reg=sp_fit_reg)
                sp.savefig('sp.png')
                fig.clear()
                a = fig.add_subplot(111)
                img_arr = mpimg.imread('sp.png')
                a.imshow(img_arr)
                a.axis('off')
                EDA_Canvas.draw()
            else:  # go with default fig creation
                data = sns.load_dataset("tips")
                data = data.dropna()
                sp = sns.lmplot(data=data, x="total_bill", y="tip")
                sp.savefig('sp.png')
                fig.clear()
                a = fig.add_subplot(111)
                img_arr = mpimg.imread('sp.png')
                a.imshow(img_arr)
                a.axis('off')
                EDA_Canvas.draw()
        elif (index == 4):  # pca
            # use custom vals for fig creation
            if(config.has_section('pca') and config.has_section('general')):
                print('You selected item %d: "%s"' % (index, value))
            else:  # go with default fig creation
                print('You selected item %d: "%s"' % (index, value))
                fig.clear()
                EDA_Canvas.draw()

class Red_Frame(Frame):  # PLACEHOLDER FRAME, DELETE LATER
    def __init__(self, the_window):
        super().__init__()
        self["height"] = 150
        self["width"] = 150
        self["bg"] = "red"


def raise_frame(frame):
    frame.tkraise()

#################
# Create toolbar
###############
toolbar = DV_Toolbar.DV_Toolbar(root)
toolbar.grid()

###############################
# Create tab for data cleaning
#############################
DC_Bottom_Pane = PanedWindow(note)
DC_Bottom_Pane.config(orient='vertical', bd=1, sashwidth=4, bg='black')
DC_Bottom_Pane.grid(sticky='nsew')

DC_Top_Pane = PanedWindow(DC_Bottom_Pane)
DC_Top_Pane.config(orient='horizontal', bd=1, sashwidth=4, bg='black')
DC_Top_Pane.grid(sticky='nsew')
DC_Bottom_Pane.add(DC_Top_Pane, stretch='always')

DC_Controls_Frame = Frame(DC_Bottom_Pane)
DC_Controls_Frame.config(width=200, height=100)
DC_Controls_Frame.grid(sticky='nsew')
DC_Controls_Frame.grid_columnconfigure(0, weight=1)
DC_Bottom_Pane.add(DC_Controls_Frame, stretch='never')

# add various control frames here
# grid them all in same spot

DC_Listbox_Frame = Frame(DC_Top_Pane)
DC_Listbox_Frame.config(width=100, height=200)
DC_Listbox_Frame.grid(sticky='nsew')
DC_Top_Pane.add(DC_Listbox_Frame, stretch='never')

DC_list = ["Find and Replace", "Scaling",
                 "Factorize", "Feature Selection", "Outliers"]
DC_Listbox = DV_Listbox.Create_Listbox(DC_Listbox_Frame, DC_list)
DC_Listbox.bind('<<ListboxSelect>>', Cleaning_onSelect)

DC_Table_Frame = Frame(DC_Top_Pane)
DC_Table_Frame.grid(sticky='nsew')
DC_Table_Frame.grid_rowconfigure(0, weight=1)
DC_Table_Frame.grid_columnconfigure(0, weight=1)
DC_Top_Pane.add(DC_Table_Frame, stretch='always')

table = DV_Table.DV_Table(DC_Table_Frame)
table.grid(sticky='nsew')

#################################################
# Create tab for exploratory data analysis (EDA)
###############################################
EDA_Bottom_Pane = PanedWindow(note)
EDA_Bottom_Pane.config(orient='vertical', bd=0, sashwidth=4)
EDA_Bottom_Pane.grid(sticky='nsew')

EDA_Top_Pane = PanedWindow(EDA_Bottom_Pane)
EDA_Top_Pane.config(orient='horizontal', bd=0, sashwidth=4)
EDA_Top_Pane.grid(sticky='nsew')
EDA_Bottom_Pane.add(EDA_Top_Pane, stretch='always')

EDA_Controls_Frame = Frame(EDA_Bottom_Pane)
EDA_Controls_Frame.config(width=200, height=100)
EDA_Controls_Frame.grid(sticky='nsew')
EDA_Controls_Frame.grid_columnconfigure(0, weight=1)
EDA_Bottom_Pane.add(EDA_Controls_Frame, stretch='never')

pp_frame = DV_EDA_Control_Panels.PP_Frame(EDA_Controls_Frame, fig, EDA_Canvas)
cm_frame = DV_EDA_Control_Panels.CM_Frame(EDA_Controls_Frame, fig, EDA_Canvas)
bp_frame = DV_EDA_Control_Panels.BP_Frame(EDA_Controls_Frame, fig, EDA_Canvas)

for frame in (pp_frame, cm_frame, bp_frame):
    frame.grid(row=0, column=0, sticky='nsew')
raise_frame(pp_frame)

EDA_Listbox_Frame = Frame(EDA_Top_Pane)
EDA_Listbox_Frame.config(bg='blue', width=100, height=200)
EDA_Listbox_Frame.grid(sticky='nsew')
EDA_Top_Pane.add(EDA_Listbox_Frame, stretch='never')

EDA_list = ["Pairplot", "Correlation Matrix",
            "Bar Chart", "Scatter Plot", "PCA"]
EDA_Listbox = Create_Listbox(EDA_Listbox_Frame, EDA_list)
EDA_Listbox.bind('<<ListboxSelect>>', EDA_onSelect)

EDA_Canvas_Frame = Frame(EDA_Top_Pane)
EDA_Canvas_Frame.config(bg='orange')
EDA_Canvas_Frame.grid(sticky='nsew')
EDA_Canvas_Frame.grid_rowconfigure(0, weight=1)
EDA_Canvas_Frame.grid_columnconfigure(0, weight=1)
EDA_Top_Pane.add(EDA_Canvas_Frame, stretch='always')

fig = Figure()
EDA_Canvas = FigureCanvasTkAgg(fig, master=EDA_Canvas_Frame)
EDA_Canvas.get_tk_widget().grid(sticky='nsew')


###############################
# Add the tabs to the notebook
#############################
note.add(DC_Bottom_Pane, text="Data Cleaning")
note.add(EDA_Bottom_Pane, text="EDA")

note.grid(sticky='nesw')
root.grid_columnconfigure(0, weight=1)
root.grid_rowconfigure(1, weight=1)

while(not table.winfo_ismapped()):
    time.sleep(0.25)
    root.update()

table.scroll_reset()

root.mainloop()

#################################################################################################
#### TODO: ######################################################################################

# FINALIZE AND TEST DATAFRAME VIEW
# NEED TO MAKE THE BP LISTBOXES CUR_SELECTION INITIALIZE CORRECTLY ACCORDING TO WHATS IN THE .INI
# TEST ALL THE CONTROL PANELS, AS MANY OPTIONS AND COMBINATIONS AS POSSIBLE TO CHECK FOR ERRORS

# GET AN EXECUTABLE RUNNING

# GET ALL CONTROL PANELS UP AND RUNNING, INCLUDING THE ONE FOR PCA (MAKE PCA PLOT)

# CONSIDER REPLACING FIGCANVAS WITH CANVAS AND SAVE ALL PLOTS AS PNG, MIGHT MAKE CANVAS ZOOM FUNCTIONALITY EASIER
# WOULD MAKE VARIOUS GRAPHING FUNCTIONS MORE CLASSABLE IF YOU IMPORT *GRAPH2PNG (CLEAN UP FUNCTIONS INTO A FILE*)
# THEN JUST CALL GRAPH2PNG.PP, GRAPH2PNG.CM, ..., GRAPH2PNG.PCA IN EDA ONSELECT AND CONTROL PANEL EVENTS
# CLEAN UP MOST FUNCTIONS INTO CLASSES AND OTHER FILES AND IMPORT (READABILITY)

# CANVAS ZOOM FUNCTIONALITY

# SWITCH DATA CLEANING LAYOUT TO MATCH NEW EDA LAYOUT

# LOADING BAR AMOUNT AND/OR ERROR REPORTING CAN BE PLACED AT (THESE ARE GUESSES):
    # ERROR READING INI, 0% ACT, %0 DIS
    # ERROR UPDATING LOADSCREEN OR LOADBAR, 2% ACT, %5 DIS
    # ERROR RAISING CONTROL PANEL, 5% ACT, 15% DIS
    # ERROR READING DATA, 8% ACT, 25% DIS
    # ERROR SETTING VARIABLES, 12% ACT, 45% DIS
    # ERROR PLOTTING GRAPH, BAD OPTION IN GRAPH SETTINGS, 95% ACT, 70% DIS
    # ERROR SAVING TO PNG, 96% ACT, 75% DIS
    # ERROR CLEARING CANVAS, 97% ACT, 80% DIS
    # ERROR READING PNG, 98% ACT, 85% DIS
    # ERROR DISPLAYING PNG, 99% ACT, DIS 95%
# LOCATIONS IN EXAMPLE CODE:
"""
    #EDA ON SELECT STARTS
        index = int(w.curselection()[0])
        value = w.get(index)
        # Check ini for graph settings
        config.read('datavis.ini')
# ERROR READING INI, 0% ACT, %0 DIS

        # display 'please stand by' image
        fig.clear()
        a = fig.add_subplot(111)
        img_arr = mpimg.imread('PSB.png')
        a.imshow(img_arr)
        a.axis('off')
        EDA_Canvas.draw()
# ERROR UPDATING LOADSCREEN OR LOADBAR, 2% ACT, %5 DIS

        elif (index == 3):  # scatter plot
            raise_frame(sp_frame)
# ERROR RAISING CONTROL PANEL, 5% ACT, 15% DIS

            # use custom vals for fig creation
            if(config.has_section('scatter') and config.has_section('general')):
                # import user data set
                data = config.get('general', 'dataset_location')
                data = data.dropna()
# ERROR READING DATA, 8% ACT, 25% DIS
                
                # import user graph settings
                sp_x = config.get('scatter', 'x')  # x var
                sp_y = config.get('scatter', 'y')  # y var
                sp_hue = config.get('scatter', 'hue')  # hue column
                sp_legend = config.getboolean(
                    'scatter', 'legend')  # display legend?
                sp_scatter = config.getboolean(
                    'scatter', 'scatter')  # draw scatter?
                # fit linear regression line?
                sp_fit_reg = config.get('scatter', 'fit_reg')

                print('SP ON LISTBOX:')
                print('X: ', sp_x)
                print('Y: ', sp_y)
                print('Hue: ', sp_hue)
                print('Legend: ', sp_legend)
                print('Scatter: ', sp_scatter)
                print('Fit Reg: ', sp_fit_reg)
# ERROR SETTING VARIABLES, 12% ACT, 45% DIS

                sp = sns.lmplot(data=data, x=sp_x, y=sp_y, hue=sp_hue,
                                legend=sp_legend, scatter=sp_scatter, fit_reg=sp_fit_reg)
# ERROR PLOTTING GRAPH, BAD OPTION IN GRAPH SETTINGS, 95% ACT, 70% DIS

                sp.savefig('sp.png')
# ERROR SAVING TO PNG, 96% ACT, 75% DIS

                fig.clear()
                a = fig.add_subplot(111)
# ERROR CLEARING CANVAS, 97% ACT, 80% DIS
                img_arr = mpimg.imread('sp.png')
# ERROR READING PNG, 98% ACT, 85% DIS
                a.imshow(img_arr)
                a.axis('off')
                EDA_Canvas.draw()
# ERROR DISPLAYING PNG, 99% ACT, DIS 95%
"""
# MAY HAVE TO ADD DELAYS TO SHOW LOADING BAR CHANGING AT ALL
# SOMEHOW SEPERATE THE DELAY ON BAR FROM ACTUAL CODE PROGRESS

# ERROR ON STARTUP COULD ASK IF THE USER WANTS TO RESET INI TO DEFAULT TO SEE IF THAT HELPS